{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport warning from 'tiny-warning';\nvar isObject = function isObject(obj) {\n  return obj && typeof obj === 'object' && !Array.isArray(obj);\n};\nvar valueNs = \"extendCurrValue\" + Date.now();\nfunction mergeExtend(style, rule, sheet, newStyle) {\n  var extendType = typeof style.extend; // Extend using a rule name.\n\n  if (extendType === 'string') {\n    if (!sheet) return;\n    var refRule = sheet.getRule(style.extend);\n    if (!refRule) return;\n    if (refRule === rule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] A rule tries to extend itself \\n\" + rule.toString()) : void 0;\n      return;\n    }\n    var parent = refRule.options.parent;\n    if (parent) {\n      var originalStyle = parent.rules.raw[style.extend];\n      extend(originalStyle, rule, sheet, newStyle);\n    }\n    return;\n  } // Extend using an array.\n\n  if (Array.isArray(style.extend)) {\n    for (var index = 0; index < style.extend.length; index++) {\n      var singleExtend = style.extend[index];\n      var singleStyle = typeof singleExtend === 'string' ? _extends({}, style, {\n        extend: singleExtend\n      }) : style.extend[index];\n      extend(singleStyle, rule, sheet, newStyle);\n    }\n    return;\n  } // Extend is a style object.\n\n  for (var prop in style.extend) {\n    if (prop === 'extend') {\n      extend(style.extend.extend, rule, sheet, newStyle);\n      continue;\n    }\n    if (isObject(style.extend[prop])) {\n      if (!(prop in newStyle)) newStyle[prop] = {};\n      extend(style.extend[prop], rule, sheet, newStyle[prop]);\n      continue;\n    }\n    newStyle[prop] = style.extend[prop];\n  }\n}\nfunction mergeRest(style, rule, sheet, newStyle) {\n  // Copy base style.\n  for (var prop in style) {\n    if (prop === 'extend') continue;\n    if (isObject(newStyle[prop]) && isObject(style[prop])) {\n      extend(style[prop], rule, sheet, newStyle[prop]);\n      continue;\n    }\n    if (isObject(style[prop])) {\n      newStyle[prop] = extend(style[prop], rule, sheet);\n      continue;\n    }\n    newStyle[prop] = style[prop];\n  }\n}\n/**\n * Recursively extend styles.\n */\n\nfunction extend(style, rule, sheet, newStyle) {\n  if (newStyle === void 0) {\n    newStyle = {};\n  }\n  mergeExtend(style, rule, sheet, newStyle);\n  mergeRest(style, rule, sheet, newStyle);\n  return newStyle;\n}\n/**\n * Handle `extend` property.\n */\n\nfunction jssExtend() {\n  function onProcessStyle(style, rule, sheet) {\n    if ('extend' in style) return extend(style, rule, sheet);\n    return style;\n  }\n  function onChangeValue(value, prop, rule) {\n    if (prop !== 'extend') return value; // Value is empty, remove properties set previously.\n\n    if (value == null || value === false) {\n      for (var key in rule[valueNs]) {\n        rule.prop(key, null);\n      }\n      rule[valueNs] = null;\n      return null;\n    }\n    if (typeof value === 'object') {\n      for (var _key in value) {\n        rule.prop(_key, value[_key]);\n      }\n      rule[valueNs] = value;\n    } // Make sure we don't set the value in the core.\n\n    return null;\n  }\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}\nexport default jssExtend;","map":null,"metadata":{},"sourceType":"module"}