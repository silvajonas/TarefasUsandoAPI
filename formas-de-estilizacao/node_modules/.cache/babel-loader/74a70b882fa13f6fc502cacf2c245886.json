{"ast":null,"code":"import warning from 'tiny-warning';\n\n/**\n * Set selector.\n *\n * @param original rule\n * @param className class string\n * @return flag indicating function was successfull or not\n */\n\nfunction registerClass(rule, className) {\n  // Skip falsy values\n  if (!className) return true; // Support array of class names `{composes: ['foo', 'bar']}`\n\n  if (Array.isArray(className)) {\n    for (var index = 0; index < className.length; index++) {\n      var isSetted = registerClass(rule, className[index]);\n      if (!isSetted) return false;\n    }\n    return true;\n  } // Support space separated class names `{composes: 'foo bar'}`\n\n  if (className.indexOf(' ') > -1) {\n    return registerClass(rule, className.split(' '));\n  }\n  var parent = rule.options.parent; // It is a ref to a local rule.\n\n  if (className[0] === '$') {\n    var refRule = parent.getRule(className.substr(1));\n    if (!refRule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Referenced rule is not defined. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n    if (refRule === rule) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Cyclic composition detected. \\n\" + rule.toString()) : void 0;\n      return false;\n    }\n    parent.classes[rule.key] += \" \" + parent.classes[refRule.key];\n    return true;\n  }\n  parent.classes[rule.key] += \" \" + className;\n  return true;\n}\n/**\n * Convert compose property to additional class, remove property from original styles.\n */\n\nfunction jssCompose() {\n  function onProcessStyle(style, rule) {\n    if (!('composes' in style)) return style;\n    registerClass(rule, style.composes); // Remove composes property to prevent infinite loop.\n\n    delete style.composes;\n    return style;\n  }\n  return {\n    onProcessStyle: onProcessStyle\n  };\n}\nexport default jssCompose;","map":null,"metadata":{},"sourceType":"module"}